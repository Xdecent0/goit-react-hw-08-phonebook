{"version":3,"file":"static/js/258.8a6fb6bd.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contact/Contacts.module.css?7f49","pages/Contact/Contacts.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"input\":\"ContactForm_input__Bl93P\",\"formBtn\":\"ContactForm_formBtn__qZGY3\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport {\n  useAddContactMutation,\n  useGetContactsQuery,\n} from '../../service/phoneApi';\n\nimport style from './ContactForm.module.css';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const [name, setName] = useState(INITIAL_STATE.name);\n  const [number, setNumber] = useState(INITIAL_STATE.number);\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n  const { data: contacts } = useGetContactsQuery();\n  const [addContact] = useAddContactMutation();\n\n  const onSubmit = event => {\n    event.preventDefault();\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return Notify.failure(`Contact '${name}' is already exist`);\n    }\n    const id = nanoid();\n    addContact({ id, name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName(INITIAL_STATE.name);\n    setNumber(INITIAL_STATE.number);\n  };\n\n  return (\n    <form className={style.FormInput} onSubmit={onSubmit}>\n      <label htmlFor={nameInputId}>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        maxLength=\"40\"\n        required\n        value={name}\n        onChange={event => setName(event.target.value)}\n        id={nameInputId}\n        className={style.FormInput__input}\n      />\n      <label htmlFor={numberInputId}>Number</label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        maxLength=\"12\"\n        required\n        value={number}\n        onChange={event => setNumber(event.target.value)}\n        id={numberInputId}\n        className={style.FormInput__input}\n      />\n      <button type=\"submit\" className={style.formBtn}>\n        Add Contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;","export const getFilter = state => state.reducer.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsText\":\"ContactListItem_contactsText__yDzxZ\",\"contactsItem\":\"ContactListItem_contactsItem__Jxkos\",\"contactName\":\"ContactListItem_contactName__kCRjB\",\"contactTel\":\"ContactListItem_contactTel__1PhQH\",\"contactsBtn\":\"ContactListItem_contactsBtn__RAVR+\"};","import PropTypes from 'prop-types';\nimport { useDeleteContactMutation } from '../../service/phoneApi';\nimport style from './ContactListItem.module.css';\n\nconst ContactListItem = ({ id, name, number }) => {\n  const [deleteContact] = useDeleteContactMutation();\n  return (\n    <>\n      <li className={style.ContactList__item} key={id}>\n        <span className={style.ContactList__text}>\n          {name}: {number}\n        </span>\n        <button\n          className={style.ContactList__button}\n          onClick={() => deleteContact(id)}\n        >\n          Delete\n        </button>\n      </li>\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;","// extracted by mini-css-extract-plugin\nexport default {\"contactsText\":\"ContactList_contactsText__R-QvI\",\"contactName\":\"ContactList_contactName__wLcl6\"};","import { useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/selectors';\nimport { useGetContactsQuery } from '../../service/phoneApi';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport PropTypes from 'prop-types';\nimport style from './ContactList.module.css';\n\nconst ContactList = () => {\n  const filter = useSelector(getFilter);\n\n  const { data: contacts,  isError } = useGetContactsQuery();\n\n  const filteredContacts =\n    contacts &&\n    contacts.filter(contact => contact.name.toLowerCase().includes(filter));\n\n  const isContactsEmpty = filteredContacts && filteredContacts.length > 0;\n\n  return (\n    <>\n      {isError && console.log(isError)}\n      {isContactsEmpty ? (\n        <ul className={style.ContactList__list}>\n          {filteredContacts.map(({ id, name, number }) => (\n            <ContactListItem key={id} id={id} name={name} number={number} />\n          ))}\n        </ul>\n      ) : (\n        <ul className={style.ContactList__list}>\n          <p>No contacts found...</p>\n        </ul>\n      )}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"filterBox\":\"Filter_filterBox__A-UPt\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/selectors';\nimport { filterContact } from '../../redux/contacts/actions';\n\nimport style from './Filter.module.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  return (\n    <div className={style.FilterContainer}>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          className={style.FilterInput}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Find contacts by name\"\n          placeholder=\"Enter search request here\"\n          value={filter}\n          onChange={event => dispatch(filterContact(event))}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Contacts_section__v5-sb\",\"title\":\"Contacts_title__xEtGa\"};","import ContactForm from '../../components/ContactForm/ContactForm';\nimport ContactList from '../../components/ContactList/ContactList';\nimport Filter from '../../components/Filter/Filter';\nimport styles from './Contacts.module.css';\n\nexport default function Contacts() {\n  return (\n    <div className={styles.section}>\n      <h1 className={styles.title}>PHONEBOOK APP</h1>\n      <h2>Add new contact</h2>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","INITIAL_STATE","useState","name","setName","number","setNumber","nameInputId","numberInputId","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","reset","className","style","onSubmit","event","preventDefault","find","contact","toLowerCase","Notify","htmlFor","type","pattern","title","maxLength","required","value","onChange","target","getFilter","state","reducer","filter","useDeleteContactMutation","deleteContact","onClick","useSelector","isError","filteredContacts","includes","isContactsEmpty","length","console","log","map","dispatch","useDispatch","placeholder","filterContact","Contacts","styles"],"sourceRoot":""}